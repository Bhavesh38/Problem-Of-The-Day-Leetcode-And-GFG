/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int ans=0;
        if(!root){
            return ans;
        }

        queue<pair<TreeNode*,int> > p;
        p.push({root,0});

        while(!p.empty()){
            int n=p.size();
            int curr_min=p.front().second;
            int first,last;
            for(int i=0;i<n;i++){
                auto temp=p.front();
                p.pop();

                TreeNode* node=temp.first;
                int x=temp.second-curr_min;

                if(i==0){
                    first=x;
                }

                if(i==n-1){
                    last=x;
                }

                if(node->left){
                    p.push({node->left,(long long)2*x+1});
                }

                if(node->right){
                    p.push({node->right,(long long)2*x+2});
                }
            }
            ans=max(ans,last-first+1);
        }
        return ans;
    }
};