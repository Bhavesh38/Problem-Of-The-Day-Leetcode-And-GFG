// class Solution {
// public:
//     int bfs(int node,unordered_map<int,vector<int>> &adj,vector<int> &vis,vector<int> &colorCount,string &colors){
//         if(vis[node]==1){
//             return -1;
//         }
//         vis[node]=1;
//         colorCount[colors[node]-'a']++;
//         for(auto it:adj[node]){
            
//         }

//     }
//     int largestPathValue(string colors, vector<vector<int>>& edges) {
//         unordered_map<int,vector<int>> adj;
//         for(int i=0;i<edges.size();i++){
//             int u=edges[i][0];
//             int v=edges[i][1];

//             adj[u].push_back(v);
//         }
//         int ans=INT_MIN;
//         int n=colors.length();
//         vector<int> vis(n,0);
//         for(int i=0;i<n;i++){
//             if(!vis[i]){
//                 vector<int> colorCount(26,0);
//                 int cnt=bfs(i,adj,vis,colorCount,colors);
//                 if(cnt==-1){
//                     return -1;
//                 }
//                 ans=max(ans,cnt);
//             }
//         }
//         return ans;
//     }
// };

class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        int n = colors.size();
        int k = 26;
        vector<int> indegrees(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (vector<int>& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            graph[u].push_back(v);
            indegrees[v]++;
        }
        unordered_set<int> zero_indegree;
        for (int i = 0; i < n; i++) {
            if (indegrees[i] == 0) {
                zero_indegree.insert(i);
            }
        }
        vector<vector<int>> counts(n, vector<int>(k, 0));
        for (int i = 0; i < n; i++) {
            counts[i][colors[i] - 'a']++;
        }
        int max_count = 0;
        int visited = 0;
        while (!zero_indegree.empty()) {
            int u = *zero_indegree.begin();
            zero_indegree.erase(u);
            visited++;
            for (int v : graph[u]) {
                for (int i = 0; i < k; i++) {
                    counts[v][i] = max(counts[v][i], counts[u][i] + (colors[v] - 'a' == i ? 1 : 0));
                }
                indegrees[v]--;
                if (indegrees[v] == 0) {
                    zero_indegree.insert(v);
                }
            }
            max_count = max(max_count, *max_element(counts[u].begin(), counts[u].end()));
        }
        return visited == n ? max_count : -1;
    }
};