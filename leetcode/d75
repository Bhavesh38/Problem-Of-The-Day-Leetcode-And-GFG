/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int> &inorder,int is,int ie,vector<int> &postorder,int ps,int pe,map<int,int> &m){
        if(is>ie || ps> pe){
            return NULL;
        }

        TreeNode* root=new TreeNode(postorder[pe]);
        int inRoot=m[root->val];

        int numsRight=ie-inRoot;

        root->left=solve(inorder,is,inRoot-1,postorder,ps,pe-numsRight-1,m);
        root->right=solve(inorder,inRoot+1,ie,postorder,pe-numsRight,pe-1,m);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> m;
        for(int i=0;i<inorder.size();i++){
            m[inorder[i]]=i;
        }

        int is=0;
        int ie=inorder.size()-1;
        int ps=0;
        int pe=postorder.size()-1;

        return solve(inorder,is,ie,postorder,ps,pe,m);
    }
};