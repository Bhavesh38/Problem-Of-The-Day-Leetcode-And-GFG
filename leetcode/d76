class trieNode{
    public:
    char data;
    trieNode* children[26];
    bool isEnd;
    
    trieNode(char ch)
    {
        data=ch;
        for(int i=0;i<26;i++)
        {
            children[i]=NULL;
        }
        isEnd=false;
    }
};
class Trie {
    trieNode* root;
public:
    
    Trie() {
        root=new trieNode('\0');
    }
    void insertutil(trieNode* root,string word)
    {
        if(word.length()==0)
        {
            root->isEnd=true;
            return;
        }
        
        int index=word[0]-'a';
        trieNode* child;
        if(root->children[index]!=NULL)
        {
            child=root->children[index];
        }
        else
        {
            child=new trieNode(word[0]);
            root->children[index]=child;
        }
        insertutil(child,word.substr(1));
    }
    
    void insert(string word) {
        insertutil(root,word);
    }
    
    bool search(string word) {
        trieNode* temp=root;
        for(int i=0;i<word.length();i++)
        {
            int index=word[i]-'a';
            if(temp->children[index]==NULL)
            {
                return false;
            }
            else
            {
                temp=temp->children[index];
            }
        }
        return temp->isEnd;
    }
    
    bool startsWith(string prefix) {
        trieNode* temp=root;
        for(int i=0;i<prefix.length();i++)
        {
            int index=prefix[i]-'a';
            if(temp->children[index]==NULL)
            {
                return false;
            }
            else
            {
                temp=temp->children[index];
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */