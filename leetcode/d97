class Solution {
public:
    bool isPossible(int i,int j,int n,int m,vector<vector<int>>& grid){
        if(i>=0 && i<n && j>=0 && j<m && grid[i][j]==1){
            return true;
        }else{
            return false;
        }
    }
    void dfs(vector<vector<int>>& grid,int i,int j,int n,int m){
        if(i<0 || i>=n || j<0 || j>=m){
            return;
        }

        grid[i][j]=0;

        int rows[4]={0,0,-1,1};
        int columns[4]={-1,1,0,0};

        for(int t=0;t<4;t++){
            int newX=i+rows[t];
            int newY=j+columns[t];

            if(isPossible(newX,newY,n,m,grid)){
                dfs(grid,newX,newY,n,m);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        //top-row
        for(int i=0;i<m;i++){
            if(grid[0][i]==1){
                dfs(grid,0,i,n,m);
            }
        }

        //left-column
        for(int i=0;i<n;i++){
            if(grid[i][0]==1){
                dfs(grid,i,0,n,m);
            }
        }
        //right-column
        for(int i=0;i<n;i++){
            if(grid[i][m-1]==1){
                dfs(grid,i,m-1,n,m);
            }
        }

        //bottom-row
        for(int i=0;i<m;i++){
            if(grid[n-1][i]==1){
                dfs(grid,n-1,i,n,m);
            }
        }

        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                ans+=grid[i][j];
            }
        }
        return ans;
    }
};